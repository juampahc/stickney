; The main goal of this config file is to manage three services
; that are containerized:
; 1) VLLM: the process is wrapped in a bash script that reads
;    a config file to start the inference server. Defaults values
;    are being used.
; 2) Administrator REST-API: a rest api that sends signals to
;    supervisor in order to reload the inference server with 
;    the new configuration
; 3) Gradio application: Simple UI for chat.

[unix_http_server]
file=/var/run/supervisor.sock   ; the path to the socket file

; We need to set the http for the administrator REST-API
[inet_http_server]         ; inet (TCP) server disabled by default
port=*:9001                 ; ip_address:port specifier, *:port for all iface
;username=user              ; default is no username (open server)
;password=123               ; default is no password (open server)

[supervisord]
logfile =/dev/stdout 
logfile_maxbytes = 0         ; max main logfile bytes b4 rotation; default 50MB
logfile_backups=10           ; # of main logfile backups; 0 means none, default 10
loglevel=info                ; log level; default info; others: debug,warn,trace
pidfile =/var/run/supervisord.pid ; supervisord pidfile; default supervisord.pid
nodaemon=true               ; start in foreground if true; default false
silent=false                 ; no logs to stdout if true; default false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; The supervisorctl section configures how supervisorctl will connect to
; supervisord.  configure it match the settings in either the unix_http_server
; or inet_http_server section.

[supervisorctl]
;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
serverurl=http://localhost:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as in [*_http_server] if set
;password=123                ; should be same as in [*_http_server] if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

; The sample program section below shows all possible program subsection values.
; Create one or more 'real' program: sections to be able to control them under
; supervisor.

; First we start the administrator.
[program:administrator-stickney]
command=uvicorn administrator:app --host 0.0.0.0 --port 9000 --log-level trace   ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
directory=/workspace/stickney   ; directory to cwd to before exec (def no cwd)
priority=2                     ; 1st process
autorestart=true               ; utilizamos autorestart para que la API pueda reiniciar el servidor
;exitcodes=0                   ; 'expected' exit codes used with autorestart (default 0)
; Esta es la signal que vamos a enviar desde la API
stopsignal=QUIT                ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
; Ãštil para poder reiniciar libreoffice, que es un proceso hijo de este
stopasgroup=true               ; send stop signal to the UNIX process group (default false)
killasgroup=true               ; SIGKILL the UNIX process group (def false)
stdout_logfile = /dev/stdout
stderr_logfile = /dev/stderr
stdout_logfile_maxbytes = 0
stderr_logfile_maxbytes = 0

; Now we start the VLLM application with the arguments passed from container
[program:vllm-server]
command=bash start-vllm.sh $RUNTIME_ARGS
directory=/workspace/stickney
priority=3                     ; This process will be the second
autorestart=true               ; utilizamos autorestart para que la API pueda reiniciar el servidor
stopsignal=QUIT                ; signal used to kill process (default TERM)
stopasgroup=true               ; send stop signal to the UNIX process group (default false)
killasgroup=true               ; SIGKILL the UNIX process group (def false)
stdout_logfile = /dev/stdout
stderr_logfile = /dev/stderr
stdout_logfile_maxbytes = 0
stderr_logfile_maxbytes = 0

; Finally, the gradio application
[program:gradio-app]
command=bash start-gradio.sh
directory=/workspace/stickney
priority=4                     ; 3rd process
autorestart=false              
stdout_logfile = /dev/stdout
stderr_logfile = /dev/stderr
stdout_logfile_maxbytes = 0
stderr_logfile_maxbytes = 0
